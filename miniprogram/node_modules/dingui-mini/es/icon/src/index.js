"use strict";

var _dmiconfont = _interopRequireDefault(require("./dmiconfont"));

var _custom = _interopRequireDefault(require("./custom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

_custom["default"].add('dmiconfont', _dmiconfont["default"]);

var PRESET_SIZE = {
  'small': 32,
  'medium': 48,
  'large': 64,
  'huge': 96
};
Component({
  data: {
    $uiName: 'icon',
    iconText: '',
    //  ICON 名称 对应的文本
    iconSize: '',
    //  ICON样式：大小
    iconFont: '' //  ICON样式：字体

  },
  props: {
    className: '',
    type: '',
    size: 0,
    //  ICON大小，允许传入数字，或是 PRESET_SIZE 中预定义的尺寸
    onDmTap: function onDmTap() {}
  },
  didMount: function didMount() {
    this.setIconSize(this.props.size);
    this.setIconFontAndText(this.props.type);
  },
  didUpdate: function didUpdate(prevProps) {
    var _this$props = this.props,
        type = _this$props.type,
        size = _this$props.size;

    if (prevProps.type !== type) {
      this.setIconFontAndText(type);
    }

    if (prevProps.size !== size) {
      this.setIconSize(size);
    }
  },
  methods: {
    setIconSize: function setIconSize(propSize) {
      var iconSize = '';
      var intSize = parseInt(propSize, 10) || 0;

      if (intSize < 1) {
        intSize = PRESET_SIZE[propSize];
      }

      iconSize = intSize ? "font-size:".concat(intSize, "rpx;") : '';
      this.setData({
        iconSize: iconSize
      });
    },
    setIconFontAndText: function setIconFontAndText(propType) {
      var _iconResource$get = _custom["default"].get(),
          type2font = _iconResource$get.type2font,
          type2text = _iconResource$get.type2text;

      if (type2font[propType] === undefined) {
        propType = 'home';
      }

      var iconFont = type2font[propType];
      var iconText = type2text[propType];
      this.setData({
        iconFont: iconFont,
        iconText: iconText
      });
    },
    onDmTap: function onDmTap(e) {
      this.props.onDmTap(e, this);
    }
  }
});