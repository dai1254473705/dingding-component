"use strict";

var _debounce = _interopRequireDefault(require("./debounce"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

Component({
  mixins: [],
  data: {
    $uiName: 'modal',
    activeIndex: -1,
    inputVal: ''
  },
  props: {
    className: '',
    show: true,
    topImage: '',
    topImageSize: '',
    // large || small
    title: '',
    describe: '',
    hasInput: false,
    inputValue: '',
    inputPlaceholder: '',
    inputType: 'text',
    inputDisabled: false,
    inputFocus: false,
    inputMaxlength: 140,
    buttonList: [],
    // {name:"",isMainEvent:""}
    onDmBtnTap: function onDmBtnTap() {},
    onDmInput: function onDmInput() {},
    onDmClear: function onDmClear() {}
  },
  didMount: function didMount() {
    var inputValue = this.props.inputValue;
    this.setData({
      inputVal: inputValue
    });
  },
  didUpdate: function didUpdate(prevProps, prevData) {
    var _this$props = this.props,
        inputValue = _this$props.inputValue,
        hasInput = _this$props.hasInput,
        inputDisabled = _this$props.inputDisabled,
        inputFocus = _this$props.inputFocus;
    var changeData = {};
    var hasChaged = false;

    if (inputValue !== prevData.inputVal) {
      changeData.inputVal = inputValue;
      hasChaged = true;
    }

    if (inputDisabled !== prevData.inputDisabled) {
      changeData.inputDisabled = inputDisabled;
      hasChaged = true;
    }

    if (inputFocus !== prevData.inputFocus) {
      changeData.inputFocus = inputFocus;
      hasChaged = true;
    }

    if (hasInput && hasChaged) {
      this.setData(changeData);
    }
  },
  didUnmount: function didUnmount() {},
  methods: {
    onDmInputDebounceHook: (0, _debounce["default"])(function (e) {
      this.onDmInputHook(e);
    }, 300),
    onDmBtnTap: function onDmBtnTap(e) {
      this.props.onDmBtnTap(e, this);
    },
    onDmClearHook: function onDmClearHook(e) {
      if (!this.props.inputDisabled) {
        this.props.onDmClear(e, this);
        this.setData({
          inputVal: '',
          inputFocus: true
        });
      }
    },
    onDmInputHook: function onDmInputHook(e) {
      this.props.onDmInput(e, this);
      this.setData({
        inputVal: e.detail.value
      });
    },
    onDmBtnTouchStart: function onDmBtnTouchStart(e) {
      var currIndex = e && e.target && e.target.dataset && e.target.dataset.index;
      this.setData({
        activeIndex: currIndex
      });
    },
    onDmBtnTouchEnd: function onDmBtnTouchEnd(e) {
      this.setData({
        activeIndex: -1
      });
    },
    onDmBtnTouchCancel: function onDmBtnTouchCancel(e) {
      this.setData({
        activeIndex: -1
      });
    }
  }
});