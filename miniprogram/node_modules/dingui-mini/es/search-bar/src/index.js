"use strict";

var _debounce = _interopRequireDefault(require("./debounce"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

Component({
  data: {
    $uiName: 'search-bar',
    $cssName: 'dm-search-bar',
    value: '',
    focus: false
  },
  props: {
    className: '',
    value: '',
    name: '',
    placeholder: '',
    disabled: false,
    maxlength: 140,
    focus: false,
    onDmInput: function onDmInput() {},
    onDmConfirm: function onDmConfirm() {},
    onDmFocus: function onDmFocus() {},
    onDmBlur: function onDmBlur() {},
    onDmClear: function onDmClear() {},
    onDmTap: function onDmTap() {}
  },
  didMount: function didMount() {
    //  mapPropsToMethods
    // Object.keys(this.props).forEach((fn) => {
    //   (typeof this.props[fn] === 'function') &&  (this[fn] = this.props[fn])
    // })
    this.setData({
      value: this.props.value,
      focus: this.props.focus
    });
  },
  didUpdate: function didUpdate(prevProps) {
    var _this$props = this.props,
        focus = _this$props.focus,
        value = _this$props.value; // console.log(  'prevProps.value:',prevProps.value,' to ', value);

    var changeData = {};
    var hasChaged = false;

    if (value !== prevProps.value) {
      changeData.value = value;
      hasChaged = true;
    }

    if (focus !== prevProps.focus) {
      changeData.focus = focus;
      hasChaged = true;
    }

    if (hasChaged) {
      this.setData(changeData);
    }
  },
  methods: {
    onDmInputDebounceHook: (0, _debounce["default"])(function (e) {
      this.onDmInputHook(e);
    }, 300),
    onDmInputHook: function onDmInputHook(e) {
      this.props.onDmInput(e);
      this.setData({
        value: e.detail.value
      });
    },
    onDmClearHook: function onDmClearHook() {
      var _this = this;

      !this.props.disabled && this.setData({
        value: '',
        focus: true
      }, function () {
        _this.props.onDmClear({
          type: 'clear'
        });
      });
    },
    onDmConfirm: function onDmConfirm(e) {
      my.hideKeyboard();

      if (this.props.onDmSubmit) {
        this.props.onDmSubmit(e, this);
        return;
      }

      this.props.onDmConfirm(e, this);
    },
    onDmFocus: function onDmFocus(e) {
      this.props.onDmFocus(e, this);
    },
    onDmBlur: function onDmBlur(e) {
      this.props.onDmBlur(e, this);
    },
    onDmTap: function onDmTap(e) {
      this.props.onDmTap && this.props.onDmTap(e, this);
    }
  }
});